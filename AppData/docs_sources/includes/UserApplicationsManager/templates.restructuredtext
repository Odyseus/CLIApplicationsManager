
File templates
==============

conf.py template
----------------

.. literalinclude:: ../../../../UserData/UserApplicationsManager/AppData/data/templates/conf.py
    :language: python
    :prepend: # START conf.json
    :append: # END conf.json

.. note::

    All data keys are of type string and are optional unless specified otherwise.

Data keys
^^^^^^^^^

- ``name`` (**Mandatory**): The name of an application.
- ``type`` (**Mandatory**): The application type that will decide how to handle downloaded application files.

    + ``git_repo`` or ``hg_repo``: The application is a Git or Mercurial repository.
    + ``file``: The application is a single file.
    + ``archive``: The application is an archive that needs to be unpacked.

- ``url`` (**Mandatory**): The URL from where to download the application.
- ``destination`` (**Mandatory**): The final destination for an application.

    + ``git_repo`` or ``hg_repo``: The ``destination`` should always be a path to a folder.
    + ``file``: The ``destination`` should always be a path to a file.
    + ``archive``: The ``destination`` is not needed/used so it isn't mandatory for this type of application. See ``unzip_targets`` key.

- ``frequency``: Frequency in which an application should be downloaded. If not specified, it defaults to ``w`` (weekly).

    + ``d`` (daily): An application is downloaded every time that it is managed.
    + ``w`` (weekly): An application is downloaded only if at least 6 days have passed since the last download.
    + ``m`` (monthly): An application is downloaded only if at least 28 days have passed since the last download.
    + ``s`` (semestrial): An application is downloaded only if at least 87 days have passed since the last download.

- ``github_api_asset_data`` (**Dictionary**): This key must contain *matching data* and must be used only when an application ``url`` key points to a Github repository's *API URL*. The Github repository's *API URL* is used to download a JSON file with data about a repository release. The **name** key of each element of the array/list called **assets** of the downloaded JSON file is scanned for different matches to locate the URL of the asset that one actually wants to download. This key is only used by applications of ``type`` ``file`` or ``archive``. And needless to say that this key is mandatory when an application ``url`` key points to a Github repository's *API URL*. Otherwise, there wouldn't be a way to pinpoint the exact asset that needs to be downloaded.

    + ``asset_name_contains``: Self explanatory.
    + ``asset_name_starts``: Self explanatory.
    + ``asset_name_ends``: Self explanatory.

- ``checkout_revision``: This key is only used by applications of ``type`` ``git_repo`` or ``hg_repo``.

    + ``git_repo``: It can be a branch name or a tag name or a commit hash. The command executed will look like: ``git checkout <checkout_revision>``
    + ``hg_repo``: It can be a branch name or a tag name. The command executed will look like: ``hg update <checkout_revision>``

- ``unzip_prog`` (**Mandatory**): The name of the command used to unpack an archive. Key only used by applications of ``type`` ``archive``. As of now, only the ``tar`` command is implemented.
- ``untar_arg`` (**Default**: empty (no decompression argument is passed to ``tar``)): The decompress argument used by the ``tar`` program.
- ``unzip_targets`` (**Mandatory** | **List**): A list of tuples. At index zero of each tuple should be defined the path to a file/folder inside a downloaded archive. At index one should be defined the path to the folder where the target should be extracted. Key only used by applications of ``type`` ``archive``.
- ``post_extraction_actions`` (**Dictionary**): A list of actions to perform after an archive is extracted.

    + ``symlinks``: A list of tuples. At index zero, the path to a file/folder. At index one, the path to the generated symbolic link.
    + ``set_exec``: A list of file paths to set as executable.
