
Themes creation
===============

.. contextual-admonition::
    :context: info
    :title: Theming Bootstrap

    Read `Bootstrap's documentation <https://getbootstrap.com/docs/>`__ (**Theming** section) to familiarize with Bootstrap's themes using |Sass|.

Basic folder structure
----------------------

.. note::

    - The **_0_globals** folder is a convenient location where to store files that can contain reusable styles or variable overrides common to more than one theme.
    - The **node_modules** folder is inside **UserData/www** because the themes preview page uses assets from the **bootswatch** and **bootstrap** modules to preview themes.

.. code-block::

    UserData/
    ├── themes/
    │   ├── _0_globals/
    │   │   ├── _variable_overrides.scss
    │   │   └── _new_rules.scss
    │   └── theme_1/
    │       ├── conf.py
    │       └── theme.scss
    │   └── theme_2/
    │       ├── conf.py
    │       └── theme.scss
    └── www/
        └── node_modules/
            ├── a_trillion_modules
            ├── bootstrap
            ├── bootswatch
            └── another_trillion_modules

Example theme file (theme.scss)
-------------------------------

.. contextual-admonition::
    :context: info
    :title: Relative imports

    Note that the following example file imports files that aren't directly available from the theme file's location. The **bootstrap** and **bootswatch** folders are inside **UserData/www/node_modules**. And the **global_variable_overrides**, **global_new_rules** and **global_new_colors** files are inside **UserData/themes/_0_globals**. This is because the ``build`` command from this application executes ``node-sass`` using its ``--include-path`` option specifying both locations to make imports simpler.

.. literalinclude:: ../../../../UserData/BootstrapThemesGenerator/UserData/themes/flatly_mod/theme.scss
    :language: scss
    :prepend: // START theme.scss
    :append: // END theme.scss

Example theme configuration file (conf.py)
------------------------------------------

.. note::

    These options are only read on the server side of the page preview page. There is no need to restart the server when changing the content of the **conf.py** file since the file is read through Ajax calls from the JavaScript side of the theme preview page.

The theme configuration file stores data that will be used to identify the theme on the themes preview page. This file is completely optional and it isn't needed to build a theme nor to preview it.

- ``settings``: This key is the only key on this file that will be read. It can contain any of the following optional keys.

    + ``theme_name``: The name for the theme. If not provided, a name for the theme will be generated from the theme's folder name.
    + ``theme_description``: A string describing the theme. The strings is treated as Markdown markup and is going to be rendered as HTML.
    + ``extra_examples_file``: A path to an HTML file relative to the **UserData/themes** folder. This file can contain any HTML markup that exemplifies any new components/colors added by the generated themes that aren't already exemplified by the existent themes preview page.
    + ``extra_examples_html``: HTML markup that exemplifies any new components/colors added by the generated themes that aren't already exemplified by the existent themes preview page. It has the advantage that it can be dynamically generated. So, instead of writing a trillion lines of HTML, one can write a couple dozens lines of Python code to generate the same markup.

        .. contextual-admonition::
            :context: info
            :title: Special CSS class used in markup specified in ``extra_examples_file`` and ``extra_examples_html``

            - ``bstg-example``: This class is used to add HTML source code preview. An example wrapped with a ``div`` with this class will be rendered *boxed* and with a button on the top right corner that, when clicked, will display the example's source code.

.. literalinclude:: ../../../../UserData/BootstrapThemesGenerator/UserData/themes/flatly_mod/conf.py
    :language: python
    :prepend: # START conf.py
    :append: # END conf.py
