.. role:: text-line-through

General notes
=============

- In the future, if the **data\_tables.json** file gets to large and the main index page gets to slow when loading, it could be possible to separate the categories into their own index pages and the data.json files into separated files for each category.

    + With ``deferRender`` set to **false** and more than 70.000 (seventy thousands) entries, the table rendering (filtering, loading, etc.) is super slow. May need to think about creating separated tables/indexes. With ``deferRender`` set to **true**, the table is also slow, but not so much.
    + A way to reduce the amount of entries could be to assign *files ignores* to some of the GitHub repositories with multiple files, listing only the files with content that really interest me or could interest me. It seems too much of a bother to do that as of now.

- Avoid Read the docs HTML downloads at all cost. The downloaded HTML is useless because the search doesn't work and it comes with that abhorrent shit of Google Analytics. Building the documentations from source is too much of a bother. Stick with the PDF downloads and screw the rest.

    + Still avoiding at all cost RTD documentations, but I implemented a mechanism to automatically build Sphinx based docs directly from the repositories of the software/module/library (or whatever). This is viable only for small repositories like Python modules, small libraries/software, documentation only repositories, etc. It isn't worth the trouble to clone a repository of hundreds of MBs just to get its documentation.

- Removed ``iframe`` from my thoughts!!! Too much of a bother to load external HTML files on current page (a million lines of code just to barely make it fit inside the page). When dealing with pages like the Python documentation, load them in a new tab and move on.

    + I actually implemented a method to load HTML pages in-line (just like I load the Markdown files with the markdown-it library) using jQuery's ``.load()`` function. I use it with pages whose style is too basic or too horrendous and/or pages that are too complex or too big to convert them to Markdown. **Moving on...**

- Removed ``reStructuredText`` inline rendering from my thoughts!!! I was planning to add the capability of rendering ``.rst`` files inline as I do with Markdown files. But it turned out to be almost impossible due to:

    + There seems to exist only a handful of javaScript libraries (I found only two) and they either have limited rendering capabilities (`restructured <https://github.com/seikichi/restructured/>`_) or they are an absolute nightmare to build and use (`Est <https://github.com/frantic1048/Est/>`_). And the only thing that both have in common is that they are immensely bloated.
    + In light of this, either ignore ``.rst`` files, convert them to Markdown if they are simple and not too extensive or convert them to HTML if they are complex and too large. **Moving on...**

- To keep it simple, and to avoid to check if I'm dealing with files or folders, the folders **epub**, **html**, **md** and **pdf** should always contain their files in two (2) levels sub-directories (Category Name/Sub-Category Name/File Name.ext). This is to simplify the function :any:`KnowledgeBaseApp.app_utils.DataTablesObject._get_data_by_file_extension`. The first level directories are always a category name and the second level directories are always sub-categories.

HTML to Markdown conversion
---------------------------

I use Pandoc to convert HTML articles that I find on the net into Markdown.

- Markdown files are easier to create/maintain/read than HTML files.
- Some of the articles that I find are in HTML 4.1 or older. Converting them into Markdown is infinitely easier than to convert them into HTML5.
- I have found some HTML documents without closing HTML tags (for example, they use ``<p>`` tags without closing them with the ``</p>`` tag) (the people responsible for allowing this atrocity should be castrated!!!).

    + These documents cannot be prettified with any HTML prettifier in existence!!!
    + Pandoc cannot convert them into anything!!! At least not the HTML documents with vast amount of content.
    + :text-line-through:`The only way to deal with this shit (that I could find) is to load the HTML document in the browser, and from the browser's developer tools, copy the outer HTML of the document. This way one will obtain an HTML markup with tags properly closed.` I found an *easier* way to deal with this nonsense. I created a Sublime Text plugin to *mass-serialize* HTML files with the ``html5lib`` Python module. **Moving on...**

- :text-line-through:`Eradicate **mailto** addresses from the HTML files. Pandoc (at least the version I'm using) seems to ignore the \`\`--email-obfuscation=none\`\` option and always enforces \`\`javascript\`\`, which result breaks the rendering of the Markdown file by markdown-it.`

    + Fixed by using a newer version of Pandoc. I simply downloaded the official .deb package, extracted it, and use Pandoc binaries from inside a folder located inside UserData folder. If these binaries are found, they will have precedence over the installed ones.

Bootstrap JavaScript/CSS framework
----------------------------------

- Using Boostrap 5 downloaded `from its website <https://getbootstrap.com/>`__.
- Files used::

    /dist/js/bootstrap.bundle.js
    /dist/js/bootstrap.bundle.js.map
    /dist/js/bootstrap.bundle.min.js
    /dist/js/bootstrap.bundle.min.js.map

    .. note::

        - ``\*.bundle.js`` files contain the Popper plugin.
        - ``\*.css.map`` files are included to |STFU| browser console warnings. ¬¬
        - Non-minified files are included in case I want to see the source.

- Using my own Boostrap 5 theme built with `Bootstrap Themes Generator <https://gitlab.com/PythonCLIApplications/BootstrapThemesGenerator>`__ and based on `Bootswatch's <https://bootswatch.com>`__ `Flatly theme <https://bootswatch.com/flatly>`__. Only because the colors of the default Bootstrap theme are abhorrent.

DataTables JavaScript library
-----------------------------

- Download DataTables from its `web site <https://www.datatables.net/download/>`__.

    + **Styling framework:** Bootstrap
    + **Select package:** DataTables
    + **Extensions:** None
    + **Download method:** Download > Minify > Concatenate

- Files used::

    /DataTables/datatables.css
    /DataTables/datatables.js
    /DataTables/datatables.min.css
    /DataTables/datatables.min.js

    .. note::

        - Non-minified files are included in case I want to see the source.

jQuery JavaScript library
-------------------------

- Download jQuery from its `web site <https://jquery.com/download/>`__ the compressed and uncompressed files.
- Rename the compressed file to ``jquery.min.js``.

.. note::

    - Non-minified files are included in case I want to see the source.
    - The files with the version on them are kept so I can know what version I'm using. The ``jquery.min.js`` is a copy of the ``jquery.version.min.js`` and is the actually used by the web pages.

Nerd Fonts glyphs icons
-----------------------

- Since Bootstrap removed the font icons from the framework, I had to find a substitute. I found `Nerd Fonts <http://nerdfonts.com/>`__ (it's kind of an all-in-one glyphs font with almost 4000 icons).

    + The main `Nerd Fonts's site <http://nerdfonts.com/>`__
    + Download the font files from `the fonts site repository <https://github.com/ryanoasis/nerd-fonts/tree/gh-pages/assets/fonts>`__ and rename to ``nerdicons.css`` and ``nerdicons.min.css``.
    + Download the style sheets from `the fonts repository <https://github.com/ryanoasis/nerd-fonts/tree/master/css>`__ and rename to ``nerdicons.css`` and ``nerdicons.min.css``.
    + Modify both style sheets to so the font-face definition uses the three available fonts.
    + **Moving on...**


Highlight.js syntax highlighter JavaScript library
--------------------------------------------------

- This is the library that I use to highlight the syntax of code blocks. Go to `its website <https://highlightjs.org/download/>`__, uncheck some of the languages selected by default, check some of the one unselected and download the zipped file. This torture is infinitely less painful than using Node.js to build the library from source.
- Clone `its repository <https://github.com/highlightjs/highlight.js>`__ and build from source.

    .. code-block:: shell

        git clone https://github.com/highlightjs/highlight.js.git
        cd highlight.js/
        npm install
        nodejs tools/build.js -t browser --no-esm asciidoc awk bash c cmake cpp css dart diff d glsl ini javascript json lua makefile markdown ocaml php php-template plaintext properties python python-repl scss shell xml yaml

- Files used::

    /highlight.js/build/demo/styles/xcode.css
    /highlight.js/build/highlight.js
    /highlight.js/build/highlight.min.js

    .. note::

        - Rename ``xcode.css`` to ``highlight.css`` and minify it.
        - Non-minified files are included in case I want to see the source.

``mistune`` Python module
-------------------------

The `mistune <https://github.com/lepture/mistune/tree/v1>`__ Python module is used to parse Markdown files on the server side. I switched to this module from ``Markdown-it`` JavaScript library because it renders Markdown a lot faster.

.. note::

    I'm using version **0.8.4** of this module. Version **2** is still in alpha. Consider switching to version **2** when stable because it seems that it is even faster than the previous version.

TODO
----

DONE
----

- Try to create a method to load in-line HTML pages that are too complex and/or too big to convert them to Markdown.

    - One way would be using jQuery's ``.load()`` function. Preliminary tests were positive.


.. contextual-admonition::
    :context: warning
    :title: No longer used

    .. rst-class:: wy-text-strike

        Markdown-it JavaScript library

        - This is the library that I use to render in-line markdown files. Go to `its repository <https://github.com/markdown-it/markdown-it>`__ and download the files found inside the dist folder.
        - Files used::

            /dist/markdown-it.js
            /dist/markdown-it.min.js

        .. note::

            Non-minified files are included in case I want to see the source.
