#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# auto generated file.

# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import json
import os
import sys

from datetime import datetime

root_folder = os.path.realpath(os.path.abspath(os.path.join(
    os.path.normpath(os.path.join(os.path.dirname(__file__), *([".."] * 2))))))

# root_app_user_data = os.path.join(root_folder, "UserData")
# app_dirs = os.listdir(root_app_user_data)

# # Insert all the  applications to sys.path.
# for dir in app_dirs:
#     app_data_dir = os.path.join(root_app_user_data, dir, "AppData")

#     if os.path.exists(app_data_dir):
#         sys.path.insert(0, app_data_dir)

# Insert the root application to sys.path.
sys.path.insert(0, os.path.join(root_folder, "AppData"))

from python_modules.app_utils import get_all_apps

all_apps = get_all_apps()

for app in all_apps:
    sys.path.insert(0, os.path.join(app["path"], "AppData"))

# Insert Sphinx extensions to sys.path.
sys.path.insert(0, os.path.abspath("."))

# I couldn't directly import this data from the extension code itself (freaking python's relative
# imports nonsense!!!), so I import it here and pass the data to the extension as an option
# dictionary. Moving on!!!
from python_modules.cli import docopt_doc as appmanager_docopt_doc

# Dynamically import all docopt docstrings from all applications.
for app in all_apps:
    exec("from {app_slug}App.cli import docopt_doc as {app_slug_lower}_docopt_doc".format(
        app_slug=app["slug"],
        app_slug_lower=app["slug"].lower(),
    ))

# ##############################################################################
# ########################### General configuration ############################
# ##############################################################################

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "1.8.1"

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# rst is for all standard files.
# txt is for the coverage generated files.
source_suffix = [".rst", ".txt"]

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "Python CLI Applications Documentations"
copyright = "2016-%s, Odyseus" % datetime.today().year
author = "Odyseus"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ""
# The full version, including alpha/beta/rc tags.
release = ""

# The language for content auto generated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

abbreviations_path = os.path.join(os.path.dirname(__file__),
                                  "includes", "0-common",
                                  "abbreviations.restructuredtext")

with open(abbreviations_path, "r") as abbr_file:
    rst_epilog = abbr_file.read()


# ##############################################################################
# ########################### Options for HTML output ##########################
# ##############################################################################

html_theme = "sphinx_rtd_theme_mod"

html_theme_path = ["."]

html_output_encoding = "utf-8"

html_favicon = "images/python-logo.svg"

html_experimental_html5_writer = True

html_add_permalinks = "Â¶"

html_copy_source = True

html_show_sourcelink = True

html_show_copyright = True

html_show_sphinx = True

html_compact_lists = True

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# ##############################################################################
# ########################## Extensions settings ###############################
# ##############################################################################

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.coverage",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    # My Sphinx extensions
    "sphinx_extensions.contextual_admonition",
    "sphinx_extensions.custom_literalinclude",
    "sphinx_extensions.docopt_docstrings"
]

# sphinx.ext.napoleon settings
napoleon_google_docstring = False
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = True
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = True
napoleon_use_admonition_for_notes = True
napoleon_use_admonition_for_references = True
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True


# sphinx.ext.coverage.
coverage_ignore_modules = []


# extensions.docopt_docstrings.
def extract_usage(doc_string):
    """Extract the Usage section from a docopt docstring.

    Parameters
    ----------
    doc_string : str
        The docopt doctring section.

    Returns
    -------
    str
        The Usage section of a docopt docstring.
    """
    usage = doc_string[doc_string.find("Usage:") + len("Usage:"):
                       doc_string.rfind("Options:")]
    return "\n".join([line[4:] for line in usage.splitlines()])


docopt_docstrings = {
    "appmanager": appmanager_docopt_doc,
}

# extensions.custom_literalinclude.
custom_literalincludes = {
    "appmanager-usage": extract_usage(appmanager_docopt_doc),
}

# Expand "docopt_docstrings" and "custom_literalincludes" with dynamically imported data.
for app in all_apps:
    slug_lower = app["slug"].lower()
    docopt_docstrings[slug_lower] = globals()["%s_docopt_doc" % slug_lower]
    custom_literalincludes["%s-usage" %
                           slug_lower] = extract_usage(globals()["%s_docopt_doc" % slug_lower])

# ##############################################################################
# ########################## SMACK SOME FREAKING SENCE #########################
# ##############################################################################

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    "python": ("https://docs.python.org/3.5", "python.3.5.objects.inv")
}

# Python's docs don't change every week.
intersphinx_cache_limit = 90  # days


# include __init__ docstrings in class docstrings
autoclass_content = "both"

# Group method docstrings in sphinx
autodoc_member_order = "bysource"

# ##############################################################################
# ####################### Options for manual page output #######################
# ##############################################################################

# When a scalpel doesn't cut it, use a f*cking sledgehammer!!!
# FINALLY SOME F*CKING CONTROL OVER THE MAN PAGES BUILDING PROCESS!!!
if os.path.exists("man_pages_data.json"):
    man_pages_data = json.load(open("man_pages_data.json"))
    # Override project name so the application's name is shown as the manual page title.
    project = man_pages_data["app_name"]

    man_pages = [(man_pages_data["doc_path"],
                  "app.py",
                  man_pages_data["app_description"],
                  [author], 1)]

    man_show_urls = True
